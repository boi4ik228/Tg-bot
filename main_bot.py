from aiogram import *
from aiogram.filters.command import *
from aiogram.types import *
import asyncio
import DataBase
import logger

API_token = '7807029832:AAGyFBwhHP_ZDfJc4xtYzyqxuoE3LIsh-UA'

bot = Bot(token=API_token)
dp = Dispatcher()

log = logger.setup_logger('bot_logger', 'bot.log')


@dp.message(F.text.lower() == '–≤ –Ω–∞—á–∞–ª–æ')
@dp.message(F.text.lower() == '–º–µ–Ω—é')
@dp.message(Command('start'))
async def startm(message: types.Message):
    log.info('User started the bot')

    dalee = InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='dalee')
    row = [dalee]
    rows = [row]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)

    await message.reply(
        '–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã –≤ —Å—Ñ–µ—Ä–µ –ò–ë. –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ "–º–µ–Ω—é" –∏–ª–∏ "–≤ –Ω–∞—á–∞–ª–æ".',
        reply_markup=markup)


@dp.callback_query(F.data == 'dalee')
async def dalee(call: CallbackQuery):
    log.info('User proceeded to the next step')

    energy = InlineKeyboardButton(text='–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°', callback_data='energy')
    neft = InlineKeyboardButton(text='–ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ', callback_data='neft')
    dobich = InlineKeyboardButton(text='–î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è', callback_data='dobich')
    stoit = InlineKeyboardButton(text='–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è', callback_data='stoit')
    traid = InlineKeyboardButton(text='–¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí', callback_data='traid')
    gruz = InlineKeyboardButton(text='–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ', callback_data='gruz')
    trans = InlineKeyboardButton(text='–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå', callback_data='trans')
    banks = InlineKeyboardButton(text='–ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞', callback_data='banks')
    med = InlineKeyboardButton(text='–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è', callback_data='med')
    since = InlineKeyboardButton(text='–ù–∞—É–∫–∞üî¨', callback_data='since')
    gos = InlineKeyboardButton(text='–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è', callback_data='gos')
    telev = InlineKeyboardButton(text='–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°', callback_data='telev')

    row1 = [energy, neft]
    row2 = [dobich, stoit]
    row3 = [traid, gruz]
    row4 = [trans, banks]
    row5 = [med, gos]
    row6 = [telev, since]
    rows = [row1, row2, row3, row4, row5, row6]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)

    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', reply_markup=markup)


@dp.callback_query(F.data == 'energy')
async def energy(call: CallbackQuery):
    log.info('User selected "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°"')

    energy_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='energy_ssib')
    energy_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='energy_pka')
    energy_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='energy_isg')
    enegry_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='energy_gos')
    energy_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[energy_ssib], [energy_pka], [energy_isg], [enegry_gos], [energy_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" —ç–Ω–µ—Ä–≥–∫—Ç–∏–∫–∞')

    energy_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='energy_ssib_gis')
    energy_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='energy_ssib_ispdn')
    energy_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='energy_ssib_kii')
    energy_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='energy_ssib_autist')
    energy_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='energy')

    rows = [[energy_ssib_gis], [energy_ssib_ispdn], [energy_ssib_kii], [energy_ssib_autist], [energy_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" ENERGY')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='energy_ssib_gis')
    energy_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='energy_ssib_ispdn')
    energy_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='energy_ssib_kii')
    energy_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='energy_ssib_autist')
    energy_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='energy')

    rows = [[energy_ssib_gis], [energy_ssib_ispdn], [energy_ssib_kii], [energy_ssib_autist], [energy_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" ENERGY')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='energy_ssib_gis')
    energy_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='energy_ssib_ispdn')
    energy_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='energy_ssib_kii')
    energy_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='energy_ssib_autist')
    energy_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='energy')

    rows = [[energy_ssib_gis], [energy_ssib_ispdn], [energy_ssib_kii], [energy_ssib_autist], [energy_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" ENERGY')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='energy_ssib_gis')
    energy_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='energy_ssib_ispdn')
    energy_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='energy_ssib_kii')
    energy_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='energy_ssib_autist')
    energy_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='energy')

    rows = [[energy_ssib_gis], [energy_ssib_ispdn], [energy_ssib_kii], [energy_ssib_autist], [energy_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" ENERGY')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='energy_ssib_gis')
    energy_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='energy_ssib_ispdn')
    energy_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='energy_ssib_kii')
    energy_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='energy_ssib_autist')
    energy_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='energy')

    rows = [[energy_ssib_gis], [energy_ssib_ispdn], [energy_ssib_kii], [energy_ssib_autist], [energy_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'energy_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='energy_ssib')
    energy_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='energy_pka')
    energy_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='energy_isg')
    enegry_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='energy_gos')
    energy_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[energy_ssib], [energy_pka], [energy_isg], [enegry_gos], [energy_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'energy_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='energy_ssib')
    energy_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='energy_pka')
    energy_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='energy_isg')
    enegry_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='energy_gos')
    energy_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[energy_ssib], [energy_pka], [energy_isg], [enegry_gos], [energy_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'energy_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" energy')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['1', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    energy_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='energy_ssib')
    energy_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='energy_pka')
    energy_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='energy_isg')
    enegry_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='energy_gos')
    energy_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[energy_ssib], [energy_pka], [energy_isg], [energy_nazad], [enegry_gos]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞‚ö°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'neft')
async def energy(call: CallbackQuery):
    log.info('User selected "–ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ"')

    neft_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='neft_ssib')
    neft_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='neft_pka')
    neft_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='neft_isg')
    neft_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='neft_gos')
    neft_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[neft_ssib], [neft_pka], [neft_isg], [neft_gos], [neft_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'neft_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" —ç–Ω–µ—Ä–≥–∫—Ç–∏–∫–∞')

    neft_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='neft_ssib_gis')
    neft_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='neft_ssib_ispdn')
    neft_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='neft_ssib_kii')
    neft_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='neft_ssib_autist')
    neft_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='neft')

    rows = [[neft_ssib_gis], [neft_ssib_ispdn], [neft_ssib_kii], [neft_ssib_autist], [neft_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'neft_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='neft_ssib_gis')
    neft_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='neft_ssib_ispdn')
    neft_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='neft_ssib_kii')
    neft_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='neft_ssib_autist')
    neft_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='neft')

    rows = [[neft_ssib_gis], [neft_ssib_ispdn], [neft_ssib_kii], [neft_ssib_autist], [neft_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'neft_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='neft_ssib_gis')
    neft_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='neft_ssib_ispdn')
    neft_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='neft_ssib_kii')
    neft_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='neft_ssib_autist')
    neft_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='neft')

    rows = [[neft_ssib_gis], [neft_ssib_ispdn], [neft_ssib_kii], [neft_ssib_autist], [neft_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'neft_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='neft_ssib_gis')
    neft_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='neft_ssib_ispdn')
    neft_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='neft_ssib_kii')
    neft_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='neft_ssib_autist')
    neft_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='neft')

    rows = [[neft_ssib_gis], [neft_ssib_ispdn], [neft_ssib_kii], [neft_ssib_autist], [neft_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'neft_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='neft_ssib_gis')
    neft_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='neft_ssib_ispdn')
    neft_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='neft_ssib_kii')
    neft_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='neft_ssib_autist')
    neft_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='neft')

    rows = [[neft_ssib_gis], [neft_ssib_ispdn], [neft_ssib_kii], [neft_ssib_autist], [neft_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'neft_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='neft_ssib')
    neft_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='neft_pka')
    neft_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='neft_isg')
    neft_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='neft_gos')
    neft_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[neft_ssib], [neft_pka], [neft_isg], [neft_gos], [neft_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'neft_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='neft_ssib')
    neft_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='neft_pka')
    neft_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='neft_isg')
    neft_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='neft_gos')
    neft_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[neft_ssib], [neft_pka], [neft_isg], [neft_gos], [neft_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'neft_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" neft')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['2', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    neft_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='neft_ssib')
    neft_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='neft_pka')
    neft_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='neft_isg')
    neft_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='neft_gos')
    neft_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[neft_ssib], [neft_pka], [neft_isg], [neft_gos], [neft_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–µ—Ñ—Ç—è–Ω–Ω–∞—è –∏ –≥–∞–∑–æ–≤–∞—è –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å‚õΩ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'dobich')
async def energy(call: CallbackQuery):
    log.info('User selected "–î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è"')

    dobich_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='dobich_ssib')
    dobich_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='dobich_pka')
    dobich_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='dobich_isg')
    dobich_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='dobich_gos')
    dobich_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[dobich_ssib], [dobich_pka], [dobich_isg], [dobich_gos], [dobich_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" dobich')

    dobich_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='dobich_ssib_gis')
    dobich_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='dobich_ssib_ispdn')
    dobich_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='dobich_ssib_kii')
    dobich_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='dobich_ssib_autist')
    dobich_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dobich')

    rows = [[dobich_ssib_gis], [dobich_ssib_ispdn], [dobich_ssib_kii], [dobich_ssib_autist], [dobich_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='dobich_ssib_gis')
    dobich_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='dobich_ssib_ispdn')
    dobich_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='dobich_ssib_kii')
    dobich_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='dobich_ssib_autist')
    dobich_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dobich')

    rows = [[dobich_ssib_gis], [dobich_ssib_ispdn], [dobich_ssib_kii], [dobich_ssib_autist], [dobich_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='dobich_ssib_gis')
    dobich_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='dobich_ssib_ispdn')
    dobich_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='dobich_ssib_kii')
    dobich_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='dobich_ssib_autist')
    dobich_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dobich')

    rows = [[dobich_ssib_gis], [dobich_ssib_ispdn], [dobich_ssib_kii], [dobich_ssib_autist], [dobich_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='dobich_ssib_gis')
    dobich_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='dobich_ssib_ispdn')
    dobich_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='dobich_ssib_kii')
    dobich_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='dobich_ssib_autist')
    dobich_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dobich')

    rows = [[dobich_ssib_gis], [dobich_ssib_ispdn], [dobich_ssib_kii], [dobich_ssib_autist], [dobich_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='dobich_ssib_gis')
    dobich_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='dobich_ssib_ispdn')
    dobich_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='dobich_ssib_kii')
    dobich_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='dobich_ssib_autist')
    dobich_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dobich')

    rows = [[dobich_ssib_gis], [dobich_ssib_ispdn], [dobich_ssib_kii], [dobich_ssib_autist], [dobich_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='dobich_ssib')
    dobich_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='dobich_pka')
    dobich_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='dobich_isg')
    dobich_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='dobich_gos')
    dobich_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[dobich_ssib], [dobich_pka], [dobich_isg], [dobich_gos], [dobich_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='dobich_ssib')
    dobich_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='dobich_pka')
    dobich_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='dobich_isg')
    dobich_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='dobich_gos')
    dobich_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[dobich_ssib], [dobich_pka], [dobich_isg], [dobich_gos], [dobich_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'dobich_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" dobich')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['3', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    dobich_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí',
                                       callback_data='dobich_ssib')
    dobich_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='dobich_pka')
    dobich_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='dobich_isg')
    dobich_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='dobich_gos')
    dobich_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[dobich_ssib], [dobich_pka], [dobich_isg], [dobich_gos], [dobich_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –î–æ–±—ã—á–∞ –∏—Å–∫–æ–ø–∞–µ–º—ã—Ö‚õèÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'stoit')
async def energy(call: CallbackQuery):
    log.info('User selected "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è"')

    stoit_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='stoit_ssib')
    stoit_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='stoit_pka')
    stoit_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='stoit_isg')
    stoit_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='stoit_gos')
    stoit_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[stoit_ssib], [stoit_pka], [stoit_isg], [stoit_gos], [stoit_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" stoit')

    stoit_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='stoit_ssib_gis')
    stoit_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='stoit_ssib_ispdn')
    stoit_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='stoit_ssib_kii')
    stoit_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='stoit_ssib_autist')
    stoit_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='stoit')

    rows = [[stoit_ssib_gis], [stoit_ssib_ispdn], [stoit_ssib_kii], [stoit_ssib_autist], [stoit_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='stoit_ssib_gis')
    stoit_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='stoit_ssib_ispdn')
    stoit_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='stoit_ssib_kii')
    stoit_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='stoit_ssib_autist')
    stoit_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='stoit')

    rows = [[stoit_ssib_gis], [stoit_ssib_ispdn], [stoit_ssib_kii], [stoit_ssib_autist], [stoit_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='stoit_ssib_gis')
    stoit_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='stoit_ssib_ispdn')
    stoit_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='stoit_ssib_kii')
    stoit_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='stoit_ssib_autist')
    stoit_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='stoit')

    rows = [[stoit_ssib_gis], [stoit_ssib_ispdn], [stoit_ssib_kii], [stoit_ssib_autist], [stoit_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='stoit_ssib_gis')
    stoit_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='stoit_ssib_ispdn')
    stoit_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='stoit_ssib_kii')
    stoit_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='stoit_ssib_autist')
    stoit_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='stoit')

    rows = [[stoit_ssib_gis], [stoit_ssib_ispdn], [stoit_ssib_kii], [stoit_ssib_autist], [stoit_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='stoit_ssib_gis')
    stoit_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='stoit_ssib_ispdn')
    stoit_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='stoit_ssib_kii')
    stoit_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='stoit_ssib_autist')
    stoit_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='stoit')

    rows = [[stoit_ssib_gis], [stoit_ssib_ispdn], [stoit_ssib_kii], [stoit_ssib_autist], [stoit_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='stoit_ssib')
    stoit_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='stoit_pka')
    stoit_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='stoit_isg')
    stoit_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='stoit_gos')
    stoit_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[stoit_ssib], [stoit_pka], [stoit_isg], [stoit_gos], [stoit_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='stoit_ssib')
    stoit_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='stoit_pka')
    stoit_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='stoit_isg')
    stoit_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='stoit_gos')
    stoit_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[stoit_ssib], [stoit_pka], [stoit_isg], [stoit_gos], [stoit_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'stoit_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" stoit')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['4', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    stoit_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='stoit_ssib')
    stoit_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='stoit_pka')
    stoit_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='stoit_isg')
    stoit_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='stoit_gos')
    stoit_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[stoit_ssib], [stoit_pka], [stoit_isg], [stoit_gos], [stoit_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æüèóÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'traid')
async def energy(call: CallbackQuery):
    log.info('User selected "–¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí"')

    traid_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='traid_ssib')
    traid_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='traid_pka')
    traid_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='traid_isg')
    traid_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='traid_gos')
    traid_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[traid_ssib], [traid_pka], [traid_isg], [traid_gos], [traid_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'traid_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" dobich')

    traid_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='traid_ssib_gis')
    traid_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='traid_ssib_ispdn')
    traid_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='traid_ssib_kii')
    traid_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='traid_ssib_autist')
    traid_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='traid')

    rows = [[traid_ssib_gis], [traid_ssib_ispdn], [traid_ssib_kii], [traid_ssib_autist], [traid_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'traid_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='traid_ssib_gis')
    traid_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='traid_ssib_ispdn')
    traid_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='traid_ssib_kii')
    traid_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='traid_ssib_autist')
    traid_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='traid')

    rows = [[traid_ssib_gis], [traid_ssib_ispdn], [traid_ssib_kii], [traid_ssib_autist], [traid_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'traid_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='traid_ssib_gis')
    traid_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='traid_ssib_ispdn')
    traid_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='traid_ssib_kii')
    traid_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='traid_ssib_autist')
    traid_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='traid')

    rows = [[traid_ssib_gis], [traid_ssib_ispdn], [traid_ssib_kii], [traid_ssib_autist], [traid_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'traid_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='traid_ssib_gis')
    traid_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='traid_ssib_ispdn')
    traid_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='traid_ssib_kii')
    traid_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='traid_ssib_autist')
    traid_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='traid')

    rows = [[traid_ssib_gis], [traid_ssib_ispdn], [traid_ssib_kii], [traid_ssib_autist], [traid_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'traid_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='traid_ssib_gis')
    traid_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='traid_ssib_ispdn')
    traid_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='traid_ssib_kii')
    traid_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='traid_ssib_autist')
    traid_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='traid')

    rows = [[traid_ssib_gis], [traid_ssib_ispdn], [traid_ssib_kii], [traid_ssib_autist], [traid_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'traid_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='traid_ssib')
    traid_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='traid_pka')
    traid_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='traid_isg')
    traid_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='traid_gos')
    traid_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[traid_ssib], [traid_pka], [traid_isg], [traid_gos], [traid_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'traid_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='traid_ssib')
    traid_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='traid_pka')
    traid_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='traid_isg')
    traid_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='traid_gos')
    traid_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[traid_ssib], [traid_pka], [traid_isg], [traid_gos], [traid_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'traid_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" traid')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['5', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    traid_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='traid_ssib')
    traid_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='traid_pka')
    traid_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='traid_isg')
    traid_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='traid_gos')
    traid_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[traid_ssib], [traid_pka], [traid_isg], [traid_gos], [traid_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–æ—Ä–≥–æ–≤–ª—è –∏ –†–∏—Ç–µ–π–ªüõí. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gruz')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ"')

    gruz_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gruz_ssib')
    gruz_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gruz_pka')
    gruz_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gruz_isg')
    gruz_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gruz_gos')
    gruz_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gruz_ssib], [gruz_pka], [gruz_isg], [gruz_gos], [gruz_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" gruz')

    gruz_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gruz_ssib_gis')
    gruz_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gruz_ssib_ispdn')
    gruz_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gruz_ssib_kii')
    gruz_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gruz_ssib_autist')
    gruz_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gruz')

    rows = [[gruz_ssib_gis], [gruz_ssib_ispdn], [gruz_ssib_kii], [gruz_ssib_autist], [gruz_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gruz_ssib_gis')
    gruz_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gruz_ssib_ispdn')
    gruz_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gruz_ssib_kii')
    gruz_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gruz_ssib_autist')
    gruz_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gruz')

    rows = [[gruz_ssib_gis], [gruz_ssib_ispdn], [gruz_ssib_kii], [gruz_ssib_autist], [gruz_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gruz_ssib_gis')
    gruz_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gruz_ssib_ispdn')
    gruz_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gruz_ssib_kii')
    gruz_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gruz_ssib_autist')
    gruz_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gruz')

    rows = [[gruz_ssib_gis], [gruz_ssib_ispdn], [gruz_ssib_kii], [gruz_ssib_autist], [gruz_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gruz_ssib_gis')
    gruz_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gruz_ssib_ispdn')
    gruz_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gruz_ssib_kii')
    gruz_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gruz_ssib_autist')
    gruz_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gruz')

    rows = [[gruz_ssib_gis], [gruz_ssib_ispdn], [gruz_ssib_kii], [gruz_ssib_autist], [gruz_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gruz_ssib_gis')
    gruz_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gruz_ssib_ispdn')
    gruz_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gruz_ssib_kii')
    gruz_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gruz_ssib_autist')
    gruz_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gruz')

    rows = [[gruz_ssib_gis], [gruz_ssib_ispdn], [gruz_ssib_kii], [gruz_ssib_autist], [gruz_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gruz_ssib')
    gruz_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gruz_pka')
    gruz_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gruz_isg')
    gruz_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gruz_gos')
    gruz_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gruz_ssib], [gruz_pka], [gruz_isg], [gruz_gos], [gruz_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gruz_ssib')
    gruz_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gruz_pka')
    gruz_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gruz_isg')
    gruz_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gruz_gos')
    gruz_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gruz_ssib], [gruz_pka], [gruz_isg], [gruz_gos], [gruz_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gruz_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" gruz')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['6', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gruz_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gruz_ssib')
    gruz_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gruz_pka')
    gruz_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gruz_isg')
    gruz_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gruz_gos')
    gruz_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gruz_ssib], [gruz_pka], [gruz_isg], [gruz_gos], [gruz_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì—Ä—É–∑–æ–ø–µ—Ä–µ–≤–æ–∑–∫–∏üöõ. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'trans')
async def energy(call: CallbackQuery):
    log.info('User selected "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå"')

    trans_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='trans_ssib')
    trans_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='trans_pka')
    trans_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='trans_isg')
    trans_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='trans_gos')
    trans_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[trans_ssib], [trans_pka], [trans_isg], [trans_gos], [trans_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'trans_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" trans')

    trans_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='trans_ssib_gis')
    trans_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='trans_ssib_ispdn')
    trans_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='trans_ssib_kii')
    trans_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='trans_ssib_autist')
    trans_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='trans')

    rows = [[trans_ssib_gis], [trans_ssib_ispdn], [trans_ssib_kii], [trans_ssib_autist], [trans_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'trans_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='trans_ssib_gis')
    trans_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='trans_ssib_ispdn')
    trans_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='trans_ssib_kii')
    trans_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='trans_ssib_autist')
    trans_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='trans')

    rows = [[trans_ssib_gis], [trans_ssib_ispdn], [trans_ssib_kii], [trans_ssib_autist], [trans_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'trans_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='trans_ssib_gis')
    trans_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='trans_ssib_ispdn')
    trans_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='trans_ssib_kii')
    trans_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='trans_ssib_autist')
    trans_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='trans')

    rows = [[trans_ssib_gis], [trans_ssib_ispdn], [trans_ssib_kii], [trans_ssib_autist], [trans_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'trans_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='trans_ssib_gis')
    trans_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='trans_ssib_ispdn')
    trans_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='trans_ssib_kii')
    trans_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='trans_ssib_autist')
    trans_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='trans')

    rows = [[trans_ssib_gis], [trans_ssib_ispdn], [trans_ssib_kii], [trans_ssib_autist], [trans_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'trans_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='trans_ssib_gis')
    trans_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='trans_ssib_ispdn')
    trans_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='trans_ssib_kii')
    trans_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='trans_ssib_autist')
    trans_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='trans')

    rows = [[trans_ssib_gis], [trans_ssib_ispdn], [trans_ssib_kii], [trans_ssib_autist], [trans_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'trans_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='trans_ssib')
    trans_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='trans_pka')
    trans_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='trans_isg')
    trans_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='trans_gos')
    trans_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[trans_ssib], [trans_pka], [trans_isg], [trans_gos], [trans_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'trans_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='trans_ssib')
    trans_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='trans_pka')
    trans_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='trans_isg')
    trans_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='trans_gos')
    trans_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[trans_ssib], [trans_pka], [trans_isg], [trans_gos], [trans_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'trans_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" trans')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['7', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    trans_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='trans_ssib')
    trans_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='trans_pka')
    trans_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='trans_isg')
    trans_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='trans_gos')
    trans_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[trans_ssib], [trans_pka], [trans_isg], [trans_gos], [trans_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Çüöå. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'banks')
async def energy(call: CallbackQuery):
    log.info('User selected "–ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞"')

    banks_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='banks_ssib')
    banks_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='banks_pka')
    banks_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='banks_isg')
    banks_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='banks_gos')
    banks_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[banks_ssib], [banks_pka], [banks_isg], [banks_gos], [banks_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'banks_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" banks')

    banks_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='banks_ssib_gis')
    banks_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='banks_ssib_ispdn')
    banks_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='banks_ssib_kii')
    banks_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='banks_ssib_autist')
    banks_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='banks')

    rows = [[banks_ssib_gis], [banks_ssib_ispdn], [banks_ssib_kii], [banks_ssib_autist], [banks_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'banks_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='banks_ssib_gis')
    banks_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='banks_ssib_ispdn')
    banks_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='banks_ssib_kii')
    banks_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='banks_ssib_autist')
    banks_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='banks')

    rows = [[banks_ssib_gis], [banks_ssib_ispdn], [banks_ssib_kii], [banks_ssib_autist], [banks_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'banks_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='banks_ssib_gis')
    banks_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='banks_ssib_ispdn')
    banks_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='banks_ssib_kii')
    banks_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='banks_ssib_autist')
    banks_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='banks')

    rows = [[banks_ssib_gis], [banks_ssib_ispdn], [banks_ssib_kii], [banks_ssib_autist], [banks_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'banks_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='banks_ssib_gis')
    banks_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='banks_ssib_ispdn')
    banks_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='banks_ssib_kii')
    banks_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='banks_ssib_autist')
    banks_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='banks')

    rows = [[banks_ssib_gis], [banks_ssib_ispdn], [banks_ssib_kii], [banks_ssib_autist], [banks_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'banks_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='banks_ssib_gis')
    banks_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='banks_ssib_ispdn')
    banks_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='banks_ssib_kii')
    banks_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='banks_ssib_autist')
    banks_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='banks')

    rows = [[banks_ssib_gis], [banks_ssib_ispdn], [banks_ssib_kii], [banks_ssib_autist], [banks_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'banks_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='banks_ssib')
    banks_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='banks_pka')
    banks_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='banks_isg')
    banks_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='banks_gos')
    banks_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[banks_ssib], [banks_pka], [banks_isg], [banks_gos], [banks_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'banks_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='banks_ssib')
    banks_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='banks_pka')
    banks_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='banks_isg')
    banks_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='banks_gos')
    banks_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[banks_ssib], [banks_pka], [banks_isg], [banks_gos], [banks_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'banks_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" banks')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['8', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    banks_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='banks_ssib')
    banks_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='banks_pka')
    banks_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='banks_isg')
    banks_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='banks_gos')
    banks_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[banks_ssib], [banks_pka], [banks_isg], [banks_gos], [banks_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–∞–Ω–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å—ãüí∞. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'med')
async def energy(call: CallbackQuery):
    log.info('User selected "–ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è"')

    med_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='med_ssib')
    med_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='med_pka')
    med_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='med_isg')
    med_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='med_gos')
    med_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[med_ssib], [med_pka], [med_isg], [med_gos], [med_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'med_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" med')

    med_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='med_ssib_gis')
    med_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='med_ssib_ispdn')
    med_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='med_ssib_kii')
    med_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='med_ssib_autist')
    med_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='med')

    rows = [[med_ssib_gis], [med_ssib_ispdn], [med_ssib_kii], [med_ssib_autist], [med_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'med_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='med_ssib_gis')
    med_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='med_ssib_ispdn')
    med_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='med_ssib_kii')
    med_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='med_ssib_autist')
    med_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='med')

    rows = [[med_ssib_gis], [med_ssib_ispdn], [med_ssib_kii], [med_ssib_autist], [med_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'med_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='med_ssib_gis')
    med_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='med_ssib_ispdn')
    med_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='med_ssib_kii')
    med_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='med_ssib_autist')
    med_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='med')

    rows = [[med_ssib_gis], [med_ssib_ispdn], [med_ssib_kii], [med_ssib_autist], [med_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'med_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='med_ssib_gis')
    med_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='med_ssib_ispdn')
    med_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='med_ssib_kii')
    med_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='med_ssib_autist')
    med_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='med')

    rows = [[med_ssib_gis], [med_ssib_ispdn], [med_ssib_kii], [med_ssib_autist], [med_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'med_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='med_ssib_gis')
    med_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='med_ssib_ispdn')
    med_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='med_ssib_kii')
    med_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='med_ssib_autist')
    med_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='med')

    rows = [[med_ssib_gis], [med_ssib_ispdn], [med_ssib_kii], [med_ssib_autist], [med_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'med_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='med_ssib')
    med_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='med_pka')
    med_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='med_isg')
    med_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='med_gos')
    med_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[med_ssib], [med_pka], [med_isg], [med_gos], [med_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'med_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='med_ssib')
    med_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='med_pka')
    med_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='med_isg')
    med_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='med_gos')
    med_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[med_ssib], [med_pka], [med_isg], [med_gos], [med_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'med_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" med')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['9', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    med_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='med_ssib')
    med_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='med_pka')
    med_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='med_isg')
    med_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='med_gos')
    med_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[med_ssib], [med_pka], [med_isg], [med_gos], [med_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞‚öïÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'since')
async def energy(call: CallbackQuery):
    log.info('User selected "–ù–∞—É–∫–∞üî¨"')

    since_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='since_ssib')
    since_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='since_pka')
    since_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='since_isg')
    since_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='since_gos')
    since_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[since_ssib], [since_pka], [since_isg], [since_gos], [since_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—É–∫–∞üî¨. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'since_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" med')

    since_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='since_ssib_gis')
    since_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='since_ssib_ispdn')
    since_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='since_ssib_kii')
    since_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='since_ssib_autist')
    since_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='since')

    rows = [[since_ssib_gis], [since_ssib_ispdn], [since_ssib_kii], [since_ssib_autist], [since_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'since_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='since_ssib_gis')
    since_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='since_ssib_ispdn')
    since_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='since_ssib_kii')
    since_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='since_ssib_autist')
    since_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='since')

    rows = [[since_ssib_gis], [since_ssib_ispdn], [since_ssib_kii], [since_ssib_autist], [since_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'since_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='since_ssib_gis')
    since_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='since_ssib_ispdn')
    since_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='since_ssib_kii')
    since_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='since_ssib_autist')
    since_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='since')

    rows = [[since_ssib_gis], [since_ssib_ispdn], [since_ssib_kii], [since_ssib_autist], [since_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'since_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='since_ssib_gis')
    since_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='since_ssib_ispdn')
    since_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='since_ssib_kii')
    since_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='since_ssib_autist')
    since_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='since')

    rows = [[since_ssib_gis], [since_ssib_ispdn], [since_ssib_kii], [since_ssib_autist], [since_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'since_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='since_ssib_gis')
    since_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='since_ssib_ispdn')
    since_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='since_ssib_kii')
    since_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='since_ssib_autist')
    since_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='since')

    rows = [[since_ssib_gis], [since_ssib_ispdn], [since_ssib_kii], [since_ssib_autist], [since_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'since_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='since_ssib')
    since_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='since_pka')
    since_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='since_isg')
    since_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='since_gos')
    since_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[since_ssib], [since_pka], [since_isg], [since_gos], [since_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—É–∫–∞üî¨. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'since_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='since_ssib')
    since_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='since_pka')
    since_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='since_isg')
    since_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='since_gos')
    since_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[since_ssib], [since_pka], [since_isg], [since_gos], [since_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—É–∫–∞üî¨. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'since_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" since')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['10', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    since_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='since_ssib')
    since_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='since_pka')
    since_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='since_isg')
    since_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='since_gos')
    since_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[since_ssib], [since_pka], [since_isg], [since_gos], [since_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ù–∞—É–∫–∞üî¨. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è"')

    gos_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gos_ssib')
    gos_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gos_pka')
    gos_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gos_isg')
    gos_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gos_gos')
    gos_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gos_ssib], [gos_pka], [gos_isg], [gos_gos], [gos_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gos_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" gos')

    gos_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gos_ssib_gis')
    gos_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gos_ssib_ispdn')
    gos_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gos_ssib_kii')
    gos_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gos_ssib_autist')
    gos_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gos')

    rows = [[gos_ssib_gis], [gos_ssib_ispdn], [gos_ssib_kii], [gos_ssib_autist], [gos_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gos_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gos_ssib_gis')
    gos_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gos_ssib_ispdn')
    gos_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gos_ssib_kii')
    gos_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gos_ssib_autist')
    gos_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gos')

    rows = [[gos_ssib_gis], [gos_ssib_ispdn], [gos_ssib_kii], [gos_ssib_autist], [gos_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gos_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gos_ssib_gis')
    gos_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gos_ssib_ispdn')
    gos_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gos_ssib_kii')
    gos_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gos_ssib_autist')
    gos_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gos')

    rows = [[gos_ssib_gis], [gos_ssib_ispdn], [gos_ssib_kii], [gos_ssib_autist], [gos_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gos_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–í–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gos_ssib_gis')
    gos_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gos_ssib_ispdn')
    gos_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gos_ssib_kii')
    gos_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gos_ssib_autist')
    gos_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gos')

    rows = [[gos_ssib_gis], [gos_ssib_ispdn], [gos_ssib_kii], [gos_ssib_autist], [gos_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gos_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='gos_ssib_gis')
    gos_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='gos_ssib_ispdn')
    gos_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='gos_ssib_kii')
    gos_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='gos_ssib_autist')
    gos_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='gos')

    rows = [[gos_ssib_gis], [gos_ssib_ispdn], [gos_ssib_kii], [gos_ssib_autist], [gos_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'gos_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gos_ssib')
    gos_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gos_pka')
    gos_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gos_isg')
    gos_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gos_gos')
    gos_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gos_ssib], [gos_pka], [gos_isg], [gos_gos], [gos_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gos_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gos_ssib')
    gos_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gos_pka')
    gos_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gos_isg')
    gos_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gos_gos')
    gos_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gos_ssib], [gos_pka], [gos_isg], [gos_gos], [gos_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'gos_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" gos')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['11', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    gos_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='gos_ssib')
    gos_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='gos_pka')
    gos_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='gos_isg')
    gos_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='gos_gos')
    gos_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[gos_ssib], [gos_pka], [gos_isg], [gos_gos], [gos_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ–∫—Ç–æ—ÄüèõÔ∏è. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'telev')
async def energy(call: CallbackQuery):
    log.info('User selected "–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°"')

    telev_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='telev_ssib')
    telev_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='telev_pka')
    telev_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='telev_isg')
    telev_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='telev_gos')
    telev_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[telev_ssib], [telev_pka], [telev_isg], [telev_gos], [telev_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'telev_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" telev')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'telev_ssib_gis')
async def energy(call: CallbackQuery):
    log.info('User selected "–ì–ò–°üåê" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '1'], '1')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'telev_ssib_ispdn')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–°–ü–î–ùüîí" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '1'], '2')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'telev_ssib_kii')
async def energy(call: CallbackQuery):
    log.info('User selected "–ö–ò–òüîê" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '1'], '3')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'telev_ssib_autist')
async def energy(call: CallbackQuery):
    log.info('User selected "–ê–°–£–¢–üüîß" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '1'], '4')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


@dp.callback_query(F.data == 'telev_gos')
async def energy(call: CallbackQuery):
    log.info('User selected "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '4'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='telev_ssib')
    telev_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='telev_pka')
    telev_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='telev_isg')
    telev_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='telev_gos')
    telev_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[telev_ssib], [telev_pka], [telev_isg], [telev_gos], [telev_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'telev_pka')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '2'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='telev_ssib')
    telev_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='telev_pka')
    telev_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='telev_isg')
    telev_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='telev_gos')
    telev_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[telev_ssib], [telev_pka], [telev_isg], [telev_gos], [telev_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'telev_isg')
async def energy(call: CallbackQuery):
    log.info('User selected "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä" telev')

    await call.message.reply('–°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–æ–≤...')

    spis = DataBase.get_act(['12', '3'], '0')
    if spis:
        for i in range(len(spis)):
            await call.message.reply(f'{spis[i][0][0]} \n'
                                     f'{spis[i][0][1]} \n'
                                     f'{spis[i][0][2]}')
            if spis[i][1]:
                for w in range(len(spis[i][1])):
                    await call.message.reply(f'{spis[i][1][w][0]} \n'
                                             f'{spis[i][1][w][1]} \n'
                                             f'{spis[i][1][w][2]}')
    else:
        await call.message.reply('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.')

    telev_ssib = InlineKeyboardButton(text='–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üîí', callback_data='telev_ssib')
    telev_pka = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏üìú', callback_data='telev_pka')
    telev_isg = InlineKeyboardButton(text='–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—éüìä', callback_data='telev_isg')
    telev_gos = InlineKeyboardButton(text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ì–æ—Å–°–û–ü–ö–êüëæ', callback_data='telev_gos')
    telev_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='dalee')

    rows = [[telev_ssib], [telev_pka], [telev_isg], [telev_gos], [telev_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –∏ –ú–µ–¥–∏–∞üì°. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=markup)


@dp.callback_query(F.data == 'energy_ssib')
async def energy(call: CallbackQuery):
    log.info('User selected "–í—ã–±—Ä–∞—Ç—å –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ãüîí" —ç–Ω–µ—Ä–≥–∫—Ç–∏–∫–∞')

    telev_ssib_gis = InlineKeyboardButton(text='–ì–ò–°üåê', callback_data='telev_ssib_gis')
    telev_ssib_ispdn = InlineKeyboardButton(text='–ò–°–ü–î–ùüîí', callback_data='telev_ssib_ispdn')
    telev_ssib_kii = InlineKeyboardButton(text='–ö–ò–òüîê', callback_data='telev_ssib_kii')
    telev_ssib_autist = InlineKeyboardButton(text='–ê–°–£–¢–üüîß', callback_data='telev_ssib_autist')
    telev_ssib_nazad = InlineKeyboardButton(text='–ù–∞–∑–∞–¥‚¨ÖÔ∏è', callback_data='telev')

    rows = [[telev_ssib_gis], [telev_ssib_ispdn], [telev_ssib_kii], [telev_ssib_autist], [telev_ssib_nazad]]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    await call.message.reply('–≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∑–∞—â–∏—Ç—ã', reply_markup=markup)


async def main():
    log.info('Bot started working')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
